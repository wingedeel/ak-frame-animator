'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

module.exports = function AnimationFrameComponent(InnerComponent, throttleMs) {
    return function (_React$Component) {
        _inherits(AnimatedComponent, _React$Component);

        function AnimatedComponent() {
            _classCallCheck(this, AnimatedComponent);

            var _this = _possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this));

            _this.loop = _this.loop.bind(_this);
            _this.endAnimation = _this.endAnimation.bind(_this);

            _this.state = {
                isActive: true,
                rafId: 0,
                lastInvocationMs: 0
            };
            return _this;
        }

        _createClass(AnimatedComponent, [{
            key: 'loop',
            value: function loop(time) {
                var _state = this.state,
                    lastInvocationMs = _state.lastInvocationMs,
                    isActive = _state.isActive;


                if (!isActive) {
                    return;
                }

                var shouldInvoke = !throttleMs || time - lastInvocationMs >= throttleMs;

                if (shouldInvoke) {
                    this.setState({ lastInvocationMs: time });
                    this.innerComponent.onAnimationFrame(time);
                }

                this.setState({
                    rafId: requestAnimationFrame(this.loop)
                });
            }
        }, {
            key: 'endAnimation',
            value: function endAnimation() {
                cancelAnimationFrame(this.state.rafId);

                this.setState({
                    isActive: false
                });
            }
        }, {
            key: 'componentDidMount',
            value: function componentDidMount() {
                if (!this.innerComponent.onAnimationFrame) {
                    throw new Error('The component passed to AnimationFrameComponent does not implement onAnimationFrame');
                }

                this.setState({
                    rafId: requestAnimationFrame(this.loop)
                });
            }
        }, {
            key: 'render',
            value: function render() {
                var _this2 = this;

                return React.createElement(InnerComponent, _extends({ ref: function ref(node) {
                        return _this2.innerComponent = node;
                    },
                    endAnimation: this.endAnimation
                }, this.props));
            }
        }]);

        return AnimatedComponent;
    }(React.Component);
};